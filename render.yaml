services:
  # 1. Web Service (Flask/Gunicorn)
  - type: web
    name: study-support-app
    runtime: python
    buildCommand: "pip install -r requirements.txt && python init_db.py"
    # --workers 1 を追加してリソース消費を安定させます
    startCommand: "gunicorn --workers 1 app:app"
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.0
      - key: OPENAI_API_KEY
        sync: false
      - key: MONITORING_TOKEN
        generateValue: true
      - key: REDIS_URL
        fromService:
          type: redis
          name: redis-broker
          property: connectionString
    healthCheckPath: /health
    # 永続ディスクを作成し、SQLiteデータベースを保存します
    disks:
      - name: data
        mountPath: /var/data
        sizeGB: 1

  # 2. Background Worker (Celery)
  - type: worker
    name: celery-worker
    runtime: python
    buildCommand: "pip install -r requirements.txt"
    startCommand: "python init_db.py && celery -A app.celery worker --loglevel=info"
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.0
      - key: OPENAI_API_KEY
        fromService:
          type: web
          name: study-support-app
          envVarKey: OPENAI_API_KEY
      - key: MONITORING_TOKEN
        fromService:
          type: web
          name: study-support-app
          envVarKey: MONITORING_TOKEN
      - key: REDIS_URL
        fromService:
          type: redis
          name: redis-broker
          property: connectionString
    # Webサービスで作成した永続ディスクを共有します
    disks:
      - name: data
        mountPath: /var/data
        fromService:
          type: web
          name: study-support-app
          diskName: data

  # 3. Redis Instance (Celery Broker)
  - type: redis
    name: redis-broker
    ipAllowList: []
    maxmemoryPolicy: allkeys-lru